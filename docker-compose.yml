version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ams-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: amsapi
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - ams-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./microservices/user-service/Dockerfile
    container_name: ams-user-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/amsapi?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=user-service
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ams-network
    volumes:
      - ./logs/user-service:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tenant Service
  tenant-service:
    build:
      context: .
      dockerfile: ./microservices/tenant-service/Dockerfile
    container_name: ams-tenant-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/amsapi?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=tenant-service
    ports:
      - "3002:3002"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ams-network
    volumes:
      - ./logs/tenant-service:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (nginx)
  api-gateway:
    image: nginx:alpine
    container_name: ams-api-gateway
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      user-service:
        condition: service_healthy
      tenant-service:
        condition: service_healthy
    networks:
      - ams-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:

networks:
  ams-network:
    driver: bridge